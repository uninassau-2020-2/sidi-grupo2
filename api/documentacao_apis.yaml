openapi: 3.0.0
info:
  title: Rei do Cangaço
  description: Conjunto de APIs para o projeto Rei do Cangaço
  version: 1.0.0
servers:
  - url: 'http://localhost:8081'
    description: Link do ambiente de desenvolvimento.
  - url: 'https://sidi-grupo2.herokuapp.com'
    description: Link do ambiente de produção.
security:
  - ApiKeyAuth: [ ]
paths:
  /auth/login:
    post:
      tags:
        - Autenticação
      description: Loga no ambiente e retorna informações do usuário e o token.
      summary: Loga no ambiente e obtém o token JWT.
      operationId: authLogin
      security: [ ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormularioEnvioLogin'
      responses:
        200:
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetornoLoginSchema'
        401:
          description: Login não realizado
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/RetornoLoginNaoAutorizadoSchema'
  /auth/change-password:
    post:
      tags:
        - Autenticação
      description: Trocar a senha do usuário logado.
      summary: Trocar a senha do usuário logado.
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormularioTrocarSenha'
      responses:
        204:
          description: Senha alterada com sucesso. 
        401:
          description: Alteração não realizada.
              
  /user:
    get:
      tags:
        - Usuários
      description: Listar os usuários cadastrados.
      summary: Lista os usuários.
      operationId: listAllUsers
      responses: 
        200:
          description: Sucesso, retorna a lista de usuários.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/RetornoListaUsuarios'
    post:
      tags:
        - Usuários
      description: Criar um novo usuário.
      summary: Criar um novo usuário.
      operationId: addNewUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormularioNovoUsuario'
      responses:
        201:
          description: Usuário criado com sucesso.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        401:
          description: Alteração não realizada.
  /user/{id}:
    get:
      tags:
        - Usuários
      description: Carregar usuário por ID.
      summary: Carregar usuário por ID.
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
            minimum: 1
          description: O ID do usuário.
      responses: 
        200:
          description: Sucesso, retorna o usuário.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        404:
          description: Erro, usuário não encontrado.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/RetornoUsuarioNaoEncontradoSchema'
    delete:
      tags:
        - Usuários
      description: Apagar um usuário por ID.
      summary: Apagar um usuário por ID.
      operationId: deleteUserById
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            type: integer
            minimum: 1
          description: O ID do usuário.
      responses:
        200:
          description: Usuário apagado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        404:
          description: Usuário não encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetornoUsuarioNaoEncontradoSchema'
  /sale/me:
    get:
      tags:
        - Vendas
      description: Obter minhas vendas.
      summary: Obter minhas vendas.
      operationId: getMySales
      responses: 
        200:
          description: Sucesso, retorna as vendas do usuário autenticado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetornoMinhasVendas'
  /me:
    get:
      tags:
        - Geral
      description: Obter dados gerais.
      summary: Obter dados gerais.
      operationId: obtainGeneralData
      responses: 
        200:
          description: O retorno.
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/RetornoDadosGerais'
components:
  schemas:
    RetornoLoginSchema:
      type: object
      description: O retorno do login.
      properties:
        user:
          type: object
          description: O usuário logado.
          properties:
            id:
              type: integer
              description: O ID do usuário logado.
            name:
              type: string
              description: O nome do usuário logado.
            email:
              type: string
              description: O e-mail do usuário logado.
            role:
              type: string
              description: O nível de acesso do usuário logado.
        token:
          type: string
          description: O token JWT do usuário logado.
    RetornoLoginNaoAutorizadoSchema:
      type: object
      description: O retorno do login não autorizado.
      properties:
        data:
          type: string
          description: A mensagem de erro
          example: dados inválidos
    FormularioEnvioLogin:
      type: object
      properties:
        email:
          type: string
          description: O e-mail do usuário.
        password:
          type: string
          description: A senha do usuário.
      required:
        - email
        - password
    FormularioTrocarSenha:
      type: object
      properties:
        oldPassword:
          type: string
          description: A senha antiga.
        newPassword:
          type: string
          description: A nova senha.
      required:
        - oldPassword
        - newPassword
    Usuario:
      type: object
      description: O usuário.
      properties: 
        id:
          type: integer
          description: O ID do usuário.
          example: 1
        name:
          type: string
          description: O nome do usuário.
          example: Fulano
        email:
          type: string
          description: O e-mail do usuário.
          example: fulano@cicrano.com
        role:
          type: string
          description: O nível de acesso do usuário.
          example: admin
    RetornoListaUsuarios:
      type: array
      description: A lista de usuários.
      items: 
        $ref: '#/components/schemas/Usuario'
    RetornoUsuarioNaoEncontradoSchema:
      type: object
      description: O retorno quando não é encontrado o usuário.
      properties:
        data:
          type: string
          description: A mensagem de erro
          example: usuário não encontrado
    FormularioNovoUsuario:
      type: object
      properties:
        name:
          type: string
          description: O e-mail do usuário.
        password:
          type: string
          description: A senha do usuário.
        role:
          type: string
          description: O nivel de acesso do usuário.
        email:
          type: string
          description: O e-mail do usuário.
      required:
        - name
        - password
        - role
        - email
    RetornoMinhasVendas:
      type: array
      description: O retorno das minhas vendas.
      items: 
        $ref: '#/components/schemas/VendasSchema'
    VendasSchema:
      type: object
      description: Informações de vendas.
      properties: 
        id:
          type: integer
          description: O ID da venda.
        formOfPayment:
          type: string
          description: A forma de pagamento utilizada.
        total:
          type: string
          description: O total da venda.
        change:
          type: string
          description: O troco da venda.
        products:
          type: array
          description: A lista de produtos
          items: 
            properties: 
              id:
                type: integer
                description: O ID do produto.
              amount:
                type: integer
                description: A quantidade comprada do produto.
    RetornoDadosGerais:
      type: object
      description: O retorno dos dados gerais
      properties: 
        mais_vendidos_hoje:
          type: object
          description: O produto mais vendido hoje.
          properties: 
            id:
              type: integer
              description: O ID do produto.
            nome:
              type: string
              description: O nome do produto.
            quantidade:
              type: integer
              description: A quantidade vendida do produto.
            valor_venda:
              type: string
              description: O valor total de vendas do produto.
        funcionario_do_dia:
          type: object
          description: O funcionário do dia, que mais vendeu.
          properties: 
            id:
              type: integer
              description: O ID do funcionário.
            nome:
              type: string
              description: O nome do funcionário.
            valor_venda:
              type: string
              description: O valor total de vendas do funcionário.
            quantidade_vendas:
              type: integer
              description: A quantidade total de vendas do funcionário.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: auth
      description: O token JWT.
